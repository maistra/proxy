
_GENRULE_CMD = {"@envoy//bazel/external:quiche.genrule_cmd": "#!/bin/bash\n\nset -e\n\n# This script is invoked from quiche.BUILD to tweak QUICHE source files into a\n# form usable by Envoy. Transformations performed here:\n#\n# - Move subtree under quiche/ base dir, for clarity in #include statements.\n# - Rewrite include directives for platform/impl files to point to the directory\n#   containing Envoy's QUICHE platform implementation.\n# - Fix include directives for non-platform/impl files to remove\n#   \"net/third_party\" from the path. (This is an artifact of Chromium source\n#   tree structure.)\n\n# Determine base directory of unmodified QUICHE source files. In practice, this\n# ends up being \"external/com_github_google_quiche\".\nsrc_base_dir=$$(dirname $$(dirname $$(dirname $(rootpath quic/core/quic_constants.h))))\n\n# sed commands to apply to each source file.\ncat <<EOF >sed_commands\n# Rewrite include directives for testonly platform impl files.\n/^#include/ s!net/http2/platform/impl/http2_reconstruct_object_impl.h!test/common/quic/platform/http2_reconstruct_object_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_expect_bug_impl.h!test/common/quic/platform/quic_expect_bug_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_mock_log_impl.h!test/common/quic/platform/quic_mock_log_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_port_utils_impl.h!test/common/quic/platform/quic_port_utils_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_sleep_impl.h!test/common/quic/platform/quic_sleep_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_system_event_loop_impl.h!test/common/quic/platform/quic_system_event_loop_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_test_impl.h!test/common/quic/platform/quic_test_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_test_mem_slice_vector_impl.h!test/common/quic/platform/quic_test_mem_slice_vector_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_test_output_impl.h!test/common/quic/platform/quic_test_output_impl.h!\n/^#include/ s!net/quic/platform/impl/quic_thread_impl.h!test/common/quic/platform/quic_thread_impl.h!\n/^#include/ s!net/quiche/common/platform/impl/quiche_test_impl.h!test/common/quic/platform/quiche_test_impl.h!\n/^#include/ s!net/quiche/common/platform/impl/quiche_test_helpers_impl.h!test/common/quic/platform/quiche_test_helpers_impl.h!\n/^#include/ s!net/spdy/platform/impl/spdy_test_impl.h!test/common/quic/platform/spdy_test_impl.h!\n\n# Rewrite include directives for platform impl files.\n/^#include/ s!net/(http2|spdy|quic|quiche/common)/platform/impl/!common/quic/platform/!\n\n# Rewrite include directives for epoll_server platform impl files.\n/^#include/ s!net/tools/epoll_server/platform/impl!test/common/quic/platform/!\n\n# Append \"quiche/\" to include directives to other QUICHE files.\n/^#include/ s!\"quic/!\"quiche/quic/!\n/^#include/ s!\"spdy/!\"quiche/spdy/!\n/^#include/ s!\"http2/!\"quiche/http2/!\n/^#include/ s!\"common/!\"quiche/common/!\n/^#include/ s!\"epoll_server/!\"quiche/epoll_server/!\n\n# The above global substitutions will prepend \"quiche\" to the platform code which we want to undo.\n/^#include/ s!\"quiche/common/quic/platform/!\"source/common/quic/platform/!\n\n# Use envoy specific implementations for below platform APIs.\n/^#include/ s!\"quiche_platform_impl/quiche_logging_impl.h!\"source/common/quic/platform/quiche_logging_impl.h!\n/^#include/ s!\"quiche_platform_impl/quiche_bug_tracker_impl.h!\"source/common/quic/platform/quiche_bug_tracker_impl.h!\n\n# The reset platform APIs use the QUICHE default implementations.\n/^#include/ s!\"quiche_platform_impl/!\"quiche/common/platform/default/quiche_platform_impl/!\n\n# Rewrite gmock & gtest includes.\n/^#include/ s!testing/gmock/include/gmock/!gmock/!\n/^#include/ s!testing/gtest/include/gtest/!gtest/!\n\n# Rewrite third_party includes.\n/^#include/ s!third_party/boringssl/src/include/!!\n/^#include/ s!third_party/zlib/zlib!zlib!\n\n/^import/ s!quic/core/proto/cached_network_parameters!quiche/quic/core/proto/cached_network_parameters!\n\n# Rewrite #pragma clang\n/^#pragma/ s!clang!GCC!\n/^#pragma/ s!-Weverything!-Wall!\nEOF\n\nfor src_file in $(SRCS); do\n  # Extract relative path (e.g. \"quic/core/quic_utils.cc\") from full path in\n  # src_path (e.g. \"external/com_github_google_quiche/quic/core/quic_utils.cc\").\n  src_path=\"$${src_file#$$src_base_dir/}\"\n\n  # Map to output file with quiche/ base directory inserted in path.\n  out_file=\"$(@D)/quiche/$$src_path\"\n  mkdir -p \"$$(dirname \"$$out_file\")\"\n\n  # Apply text substitutions. -E ensures consistent behavior on Linux vs. OS X.\n  sed -E -f sed_commands \"$$src_file\" > \"$$out_file\"\ndone\n"}
def genrule_cmd(label):
    return _GENRULE_CMD[label]

test unwind
set opt_level=speed_and_size
set is_pic
target x86_64 legacy haswell

; check the unwind information with a leaf function with no args
function %no_args_leaf() windows_fastcall {
block0:
    return
}
; sameln:                version: 1
; nextln:                  flags: 0
; nextln:          prologue size: 4
; nextln:         frame register: 0
; nextln:  frame register offset: 0
; nextln:           unwind codes: 1
; nextln:  
; nextln:                 offset: 1
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 5

; check the unwind information with a non-leaf function with no args
function %no_args() windows_fastcall {
    fn0 = %foo()
block0:
    call fn0()
    return
}
; sameln:                version: 1
; nextln:                  flags: 0
; nextln:          prologue size: 8
; nextln:         frame register: 0
; nextln:  frame register offset: 0
; nextln:           unwind codes: 2
; nextln:  
; nextln:                 offset: 1
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 5
; nextln:  
; nextln:                 offset: 8
; nextln:                     op: SmallStackAlloc
; nextln:                   info: 3

; check a function with medium-sized stack alloc
function %medium_stack() windows_fastcall {
    ss0 = explicit_slot 100000
block0:
    return
}
; sameln:               version: 1
; nextln:                 flags: 0
; nextln:         prologue size: 17
; nextln:        frame register: 0
; nextln: frame register offset: 0
; nextln:          unwind codes: 2
; nextln: 
; nextln:                offset: 1
; nextln:                    op: PushNonvolatileRegister
; nextln:                  info: 5
; nextln:  
; nextln:                offset: 17
; nextln:                    op: LargeStackAlloc
; nextln:                  info: 0
; nextln:                 value: 12500 (u16)

; check a function with large-sized stack alloc
function %large_stack() windows_fastcall {
    ss0 = explicit_slot 524288
block0:
    return
}
; sameln:                version: 1
; nextln:                  flags: 0
; nextln:          prologue size: 17
; nextln:         frame register: 0
; nextln:  frame register offset: 0
; nextln:           unwind codes: 2
; nextln:  
; nextln:                 offset: 1
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 5
; nextln:  
; nextln:                 offset: 17
; nextln:                     op: LargeStackAlloc
; nextln:                   info: 1
; nextln:                  value: 524288 (u32)

function %fpr_with_function_call(i64, i64) windows_fastcall {
    fn0 = %foo(f64, f64, i64, i64, i64) windows_fastcall;
block0(v0: i64, v1: i64):
    v2 = load.f64 v0+0
    v3 = load.f64 v0+8
    v4 = load.i64 v0+16
    v15 = load.f64 v0+104
    v16 = load.f64 v0+112
    v17 = load.f64 v0+120
    v18 = load.f64 v0+128
    v19 = load.f64 v0+136
    v20 = load.f64 v0+144
    v21 = load.f64 v0+152
    v22 = load.f64 v0+160
    v23 = load.f64 v0+168
    call fn0(v2, v3, v4, v1, v1)
    store.f64 v15, v1+104
    store.f64 v16, v1+112
    store.f64 v17, v1+120
    store.f64 v18, v1+128
    store.f64 v19, v1+136
    store.f64 v20, v1+144
    store.f64 v21, v1+152
    store.f64 v22, v1+160
    store.f64 v23, v1+168
    return
}
; Only check the first unwind code here because this test specifically looks to
; see that in a function that is not a leaf, a callee-save FPR is stored in an
; area that does not overlap either the callee's shadow space or stack argument
; space.
;
; sameln:                version: 1
; nextln:                  flags: 0 
; nextln:          prologue size: 22
; nextln:         frame register: 0
; nextln:  frame register offset: 0
; nextln:           unwind codes: 4
; nextln:  
; nextln:                 offset: 1
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 5
; nextln:  
; nextln:                 offset: 6
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 15
; nextln:  
; nextln:                 offset: 13
; nextln:                     op: LargeStackAlloc
; nextln:                   info: 0
; nextln:                  value: 23 (u16)
; nextln:  
; nextln:                 offset: 22
; nextln:                     op: SaveXmm128
; nextln:                   info: 15
; nextln:                  value: 10 (u16)

; check a function that has CSRs
function %lots_of_registers(i64, i64) windows_fastcall {
block0(v0: i64, v1: i64):
    v2 = load.i32 v0+0
    v3 = load.i32 v0+8
    v4 = load.i32 v0+16
    v5 = load.i32 v0+24
    v6 = load.i32 v0+32
    v7 = load.i32 v0+40
    v8 = load.i32 v0+48
    v9 = load.i32 v0+56
    v10 = load.i32 v0+64
    v11 = load.i32 v0+72
    v12 = load.i32 v0+80
    v13 = load.i32 v0+88
    v14 = load.i32 v0+96
    v15 = load.f64 v0+104
    v16 = load.f64 v0+112
    v17 = load.f64 v0+120
    v18 = load.f64 v0+128
    v19 = load.f64 v0+136
    v20 = load.f64 v0+144
    v21 = load.f64 v0+152
    v22 = load.f64 v0+160
    v23 = load.f64 v0+168
    store.i32 v2, v1+0
    store.i32 v3, v1+8
    store.i32 v4, v1+16
    store.i32 v5, v1+24
    store.i32 v6, v1+32
    store.i32 v7, v1+40
    store.i32 v8, v1+48
    store.i32 v9, v1+56
    store.i32 v10, v1+64
    store.i32 v11, v1+72
    store.i32 v12, v1+80
    store.i32 v13, v1+88
    store.i32 v14, v1+96
    store.f64 v15, v1+104
    store.f64 v16, v1+112
    store.f64 v17, v1+120
    store.f64 v18, v1+128
    store.f64 v19, v1+136
    store.f64 v20, v1+144
    store.f64 v21, v1+152
    store.f64 v22, v1+160
    store.f64 v23, v1+168
    return
}
; sameln:                version: 1
; nextln:                  flags: 0
; nextln:          prologue size: 35
; nextln:         frame register: 0
; nextln:  frame register offset: 0
; nextln:           unwind codes: 12
; nextln:  
; nextln:                 offset: 1
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 5
; nextln:  
; nextln:                 offset: 5
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 3
; nextln:  
; nextln:                 offset: 6
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 6
; nextln:  
; nextln:                 offset: 7
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 7
; nextln:  
; nextln:                 offset: 9
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 12
; nextln:  
; nextln:                 offset: 11
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 13
; nextln:  
; nextln:                 offset: 13
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 14
; nextln:  
; nextln:                 offset: 15
; nextln:                     op: PushNonvolatileRegister
; nextln:                   info: 15
; nextln:  
; nextln:                 offset: 19
; nextln:                     op: SmallStackAlloc
; nextln:                   info: 8
; nextln:  
; nextln:                 offset: 24
; nextln:                     op: SaveXmm128
; nextln:                   info: 6
; nextln:                  value: 3 (u16)
; nextln:  
; nextln:                 offset: 29
; nextln:                     op: SaveXmm128
; nextln:                   info: 7
; nextln:                  value: 2 (u16)
; nextln:  
; nextln:                 offset: 35
; nextln:                     op: SaveXmm128
; nextln:                   info: 8
; nextln:                  value: 1 (u16)

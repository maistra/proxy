test legalizer
set enable_simd
target x86_64 legacy skylake

;; shuffle

function %shuffle_different_ssa_values() -> i8x16 {
; check:  const2 = 0x80000000000000000000000000000000
; nextln: const3 = 0x01808080808080808080808080808080
block0:
    v0 = vconst.i8x16 0x00
    v1 = vconst.i8x16 0x01
    v2 = shuffle v0, v1, 0x11000000000000000000000000000000     ; pick the second lane of v1, the rest use the first lane of v0
    return v2
}
; check:  v1 = vconst.i8x16 const1
; nextln: v3 = vconst.i8x16 const2
; nextln: v4 = x86_pshufb v0, v3
; nextln: v5 = vconst.i8x16 const3
; nextln: v6 = x86_pshufb v1, v5
; nextln: v2 = bor v4, v6

function %shuffle_same_ssa_value() -> i8x16 {
; check:  const1 = 0x03000000000000000000000000000000
block0:
    v1 = vconst.i8x16 0x01
    v2 = shuffle v1, v1, 0x13000000000000000000000000000000     ; pick the fourth lane of v1 and the rest from the first lane of v1
    return v2
}
; check:  v1 = vconst.i8x16 const0
; nextln: v3 = vconst.i8x16 const1
; nextln: v2 = x86_pshufb v1, v3

;; splat

function %splat_i32() -> i32x4 {
block0:
    v0 = iconst.i32 42
    v1 = splat.i32x4 v0
    return v1
}
; check:   block0:
; nextln:     v0 = iconst.i32 42
; nextln:     v2 = scalar_to_vector.i32x4 v0
; nextln:     v1 = x86_pshufd v2, 0
; nextln:     return v1
; nextln: }

function %splat_i64() -> i64x2 {
block0:
    v0 = iconst.i64 42
    v1 = splat.i64x2 v0
    return v1
}
; check:   block0:
; nextln:     v0 = iconst.i64 42
; nextln:     v2 = scalar_to_vector.i64x2 v0
; nextln:     v1 = x86_pinsr v2, v0, 1
; nextln:     return v1

function %splat_b16() -> b16x8 {
block0:
    v0 = bconst.b16 true
    v1 = splat.b16x8 v0
    return v1
}
; check:   block0:
; nextln:     v0 = bconst.b16 true
; nextln:     v2 = scalar_to_vector.b16x8 v0
; nextln:     v3 = x86_pinsr v2, v0, 1
; nextln:     v4 = raw_bitcast.i32x4 v3
; nextln:     v5 = x86_pshufd v4, 0
; nextln:     v1 = raw_bitcast.b16x8 v5
; nextln:     return v1

function %splat_i8() -> i8x16 {
; check: const0 = 0x00000000000000000000000000000000
block0:
    v0 = iconst.i8 42
    v1 = splat.i8x16 v0
    return v1
}
; check:   block0:
; nextln:     v2 = iconst.i32 42
; nextln:     v0 = ireduce.i8 v2
; nextln:     v3 = scalar_to_vector.i8x16 v0
; nextln:     v4 = vconst.i8x16 const0
; nextln:     v1 = x86_pshufb v3, v4
; nextln:     return v1

function %swizzle() -> i8x16 {
; check: const1 = 0x70707070707070707070707070707070
block0:
    v0 = vconst.i8x16 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
    v1 = vconst.i8x16 [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
    v2 = swizzle.i8x16 v0, v1
    ; check: v3 = vconst.i8x16 const1
    ; nextln: v4 = uadd_sat v1, v3
    ; nextln: v2 = x86_pshufb v0, v4
    return v2
}

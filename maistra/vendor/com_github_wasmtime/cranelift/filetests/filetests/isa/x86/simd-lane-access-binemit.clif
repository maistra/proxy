test binemit
set enable_simd
target x86_64 legacy haswell

; for insertlane, floats are legalized differently than integers and booleans; integers and
; booleans use x86_pinsr which is manually placed in the IR so that it can be binemit-tested

function %insertlane_b8() {
block0:
[-, %rax]   v0 = bconst.b8 true
[-, %rbx]   v1 = bconst.b8 false
[-, %xmm0]  v2 = splat.b8x16 v0
[-, %xmm0]  v3 = x86_pinsr v2, v1, 10    ; bin: 66 0f 3a 20 c3 0a
            return
}

function %insertlane_i16() {
block0:
[-, %rax]   v0 = iconst.i16 4
[-, %rbx]   v1 = iconst.i16 5
[-, %xmm1]  v2 = splat.i16x8 v0
[-, %xmm1]  v3 = x86_pinsr v2, v1, 4    ; bin: 66 0f c4 cb 04
            return
}

function %insertlane_i32() {
block0:
[-, %rax]   v0 = iconst.i32 42
[-, %rbx]   v1 = iconst.i32 99
[-, %xmm4]  v2 = splat.i32x4 v0
[-, %xmm4]  v3 = x86_pinsr v2, v1, 2    ; bin: 66 0f 3a 22 e3 02
            return
}

function %insertlane_b64() {
block0:
[-, %rax]   v0 = bconst.b64 true
[-, %rbx]   v1 = bconst.b64 false
[-, %xmm2]  v2 = splat.b64x2 v0
[-, %xmm2]  v3 = x86_pinsr v2, v1, 1    ; bin: 66 48 0f 3a 22 d3 01
            return
}

; for extractlane, floats are legalized differently than integers and booleans; integers and
; booleans use x86_pextr which is manually placed in the IR so that it can be binemit-tested

function %extractlane_b8() {
block0:
[-, %rax]   v0 = bconst.b8 true
[-, %xmm0]  v1 = splat.b8x16 v0
[-, %rax]   v2 = x86_pextr v1, 10    ; bin: 66 0f 3a 14 c0 0a
            return
}

function %extractlane_i16() {
block0:
[-, %rax]   v0 = iconst.i16 4
[-, %xmm1]  v1 = splat.i16x8 v0
[-, %rax]   v2 = x86_pextr v1, 4    ; bin: 66 0f 3a 15 c8 04
            return
}

function %extractlane_i32() {
block0:
[-, %rax]   v0 = iconst.i32 42
[-, %xmm4]  v1 = splat.i32x4 v0
[-, %rcx]   v2 = x86_pextr v1, 2    ; bin: 66 0f 3a 16 e1 02
            return
}

function %extractlane_b64() {
block0:
[-, %rax]   v0 = bconst.b64 false
[-, %xmm2]  v1 = splat.b64x2 v0
[-, %rbx]   v2 = x86_pextr v1, 1    ; bin: 66 48 0f 3a 16 d3 01
            return
}

;; shuffle

function %pshufd() {
block0:
[-, %rax]   v0 = iconst.i32 42
[-, %xmm0]  v1 = scalar_to_vector.i32x4 v0  ; bin: 66 0f 6e c0
[-, %xmm0]  v2 = x86_pshufd v1, 0           ; bin: 66 0f 70 c0 00
            return
}

function %pshufb() {
block0:
[-, %rax]   v0 = iconst.i8 42
[-, %xmm0]  v1 = scalar_to_vector.i8x16 v0   ; bin: 66 0f 6e c0
[-, %rbx]   v2 = iconst.i8 43
[-, %xmm12] v3 = scalar_to_vector.i8x16 v2   ; bin: 66 44 0f 6e e3
[-, %xmm0]  v4 = x86_pshufb v1, v3           ; bin: 66 41 0f 38 00 c4
            return
}

;; blend

function %pblendw(b16x8, b16x8) {
block0(v0: b16x8 [%xmm10], v1: b16x8 [%xmm2]):
[-, %xmm10] v2 = x86_pblendw v0, v1, 0x55   ; bin: 66 44 0f 3a 0e d2 55
            return
}

;; pack/unpack

function %unpack_high_i8x16(i8x16, i8x16) {
block0(v0: i8x16 [%xmm0], v1: i8x16 [%xmm12]):
[-, %xmm0]  v2 = x86_punpckh v0, v1         ; bin: 66 41 0f 68 c4
            return
}

function %unpack_low_i32x4(i32x4, i32x4) {
block0(v0: i32x4 [%xmm7], v1: i32x4 [%xmm6]):
[-, %xmm7]  v2 = x86_punpckl v0, v1         ; bin: 66 0f 62 fe
            return
}

function %narrowing_i16x8(i16x8, i16x8) {
block0(v0: i16x8 [%xmm7], v1: i16x8 [%xmm8]):
[-, %xmm7]  v2 = snarrow v0, v1             ; bin: 66 41 0f 63 f8
[-, %xmm7]  v3 = unarrow v0, v1             ; bin: 66 41 0f 67 f8
            return
}

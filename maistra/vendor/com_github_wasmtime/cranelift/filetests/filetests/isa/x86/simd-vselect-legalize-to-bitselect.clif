test legalizer
set enable_simd
target x86_64 legacy

;; Test if vselect gets legalized if BLEND* instructions are not available

function %vselect_i8x16(b8x16, i8x16, i8x16) -> i8x16 {
block0(v0: b8x16, v1: i8x16, v2: i8x16):
    v3 = vselect v0, v1, v2
    ; check:  v4 = raw_bitcast.i8x16 v0
    ; nextln: v5 = band v1, v4
    ; nextln: v6 = band_not v2, v4
    ; nextln: v3 = bor v5, v6
    return v3
}

function %vselect_i16x8(b16x8, i16x8, i16x8) -> i16x8 {
block0(v0: b16x8, v1: i16x8, v2: i16x8):
    v3 = vselect v0, v1, v2
    ; check:  v4 = raw_bitcast.i16x8 v0
    ; nextln: v5 = band v1, v4
    ; nextln: v6 = band_not v2, v4
    ; nextln: v3 = bor v5, v6
    return v3
}

function %vselect_i32x4(b32x4, i32x4, i32x4) -> i32x4 {
block0(v0: b32x4, v1: i32x4, v2: i32x4):
    v3 = vselect v0, v1, v2
    ; check:  v4 = raw_bitcast.i32x4 v0
    ; nextln: v5 = band v1, v4
    ; nextln: v6 = band_not v2, v4
    ; nextln: v3 = bor v5, v6
    return v3
}

function %vselect_i64x2(b64x2, i64x2, i64x2) -> i64x2 {
block0(v0: b64x2, v1: i64x2, v2: i64x2):
    v3 = vselect v0, v1, v2
    ; check:  v4 = raw_bitcast.i64x2 v0
    ; nextln: v5 = band v1, v4
    ; nextln: v6 = band_not v2, v4
    ; nextln: v3 = bor v5, v6
    return v3
}

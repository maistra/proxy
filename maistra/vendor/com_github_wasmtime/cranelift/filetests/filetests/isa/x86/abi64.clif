; Test the legalization of function signatures.
test legalizer
target x86_64 legacy

; regex: V=v\d+

function %f() {
    sig0 = (i32) -> i32 system_v
    ; check: sig0 = (i32 [%rdi]) -> i32 [%rax] system_v

    sig1 = (i64) -> b1 system_v
    ; check: sig1 = (i64 [%rdi]) -> b1 [%rax] system_v

    sig2 = (f32, i64) -> f64 system_v
    ; check: sig2 = (f32 [%xmm0], i64 [%rdi]) -> f64 [%xmm0] system_v

    sig3 = () -> i128 system_v
    ; check: sig3 = () -> i64 [%rax], i64 [%rdx] system_v

    sig4 = (i128) -> i128 system_v
    ; check: sig4 = (i64 [%rdi], i64 [%rsi]) -> i64 [%rax], i64 [%rdx] system_v

block0:
    return
}

function %pass_stack_int64(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 vmctx) baldrdash_system_v {
    sig0 = (i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 vmctx) baldrdash_system_v
    fn0 = u0:0 sig0

block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64):
    call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)
    jump block1

block1:
    return
}

test compile
target arm
feature "experimental_arm32"

function %ishl_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2 = ishl v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: uxtb r1, r1
; nextln: lsl r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %ishl_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2 = ishl v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: uxth r1, r1
; nextln: lsl r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %ishl_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ishl v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: lsl r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %ushr_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2 = ushr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: uxtb r0, r0
; nextln: uxtb r1, r1
; nextln: lsr r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %ushr_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2 = ushr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: uxth r0, r0
; nextln: uxth r1, r1
; nextln: lsr r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %ushr_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ushr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: lsr r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %sshr_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2 = sshr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: sxtb r0, r0
; nextln: uxtb r1, r1
; nextln: asr r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %sshr_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2 = sshr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: sxth r0, r0
; nextln: uxth r1, r1
; nextln: asr r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %sshr_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = sshr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: asr r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %ror_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = rotr v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: ror r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %rotl_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = rotl v0, v1
    return v2
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: and r1, r1, #31
; nextln: rsb r1, r1, #32
; nextln: ror r0, r0, r1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

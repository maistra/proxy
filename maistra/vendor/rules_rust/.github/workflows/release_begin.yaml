---
name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "The new version to release"
        required: true

defaults:
  run:
    shell: bash

jobs:
  crate_universe_builds:
    if: ${{ github.repository_owner == 'bazelbuild' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Create a job for each target triple
        include:
          - os: macos-10.15
            env:
              TARGET: "aarch64-apple-darwin"
              EXTENSION: ""
          - os: ubuntu-20.04
            env:
              TARGET: "aarch64-unknown-linux-gnu"
              EXTENSION: ""
          - os: macos-10.15
            env:
              TARGET: "x86_64-apple-darwin"
              EXTENSION: ""
          - os: ubuntu-20.04
            env:
              TARGET: "x86_64-pc-windows-gnu"
              EXTENSION: ".exe"
          - os: ubuntu-20.04
            env:
              TARGET: "x86_64-unknown-linux-gnu"
              EXTENSION: ""
    steps:
      - uses: actions/checkout@v2
        with:
          ref: "${{ github.base_ref }}"
      - run: |
          # Install cross
          if [[ "${RUNNER_OS}" == "macOS" ]]; then
            curl --fail -Lo ~/cross.tar.gz https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-apple-darwin.tar.gz
          else
            curl --fail -Lo ~/cross.tar.gz https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz
          fi
          sudo tar -xf ~/cross.tar.gz -C /usr/local/bin/
          sudo chmod +x /usr/local/bin/cross
        if: matrix.os != 'windows-2019'
      - run: |
          # Install rust toolchains for host

          # Detect the current version of rust
          version="$(grep 'DEFAULT_RUST_VERSION =' ./rust/repositories.bzl | sed 's/DEFAULT_RUST_VERSION = "//' | sed 's/"//')"

          rustup override set "${version}"
          rustup update stable && rustup default stable
      - run: |
          # Setup macos build tooling
          sudo xcode-select -s /Applications/Xcode_12.4.app/Contents/Developer/

          # Set SDK environment variables
          echo "SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version)" >> $GITHUB_ENV
        if: matrix.os == 'macOS-10.15'
      - run: |
          # Build binaries
          ./crate_universe/private/bootstrap/build.sh
        env:
          TARGET: "${{ matrix.env.TARGET }}"
      - uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.env.TARGET }}"
          path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin/${{ matrix.env.TARGET }}
          if-no-files-found: error
  release:
    if: ${{ github.repository_owner == 'bazelbuild' }}
    needs: crate_universe_builds
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - run: |
          # Write new releases file
          cat ${{ github.workspace }}/.github/version.bzl.template \
          | sed 's/{VERSION}/${{ github.event.inputs.version }}/' \
          > ${{ github.workspace }}/version.bzl
      - run: |
          # Get release candidate number
          git fetch origin &> /dev/null
          num_tags="$(git tag -l | grep "${{ github.event.inputs.version }}" | wc -l | xargs || true)"
          echo "RELEASE_CANDIDATE_NUMBER=$( echo "${num_tags}" | python3 -c 'import sys; print(int(sys.stdin.read().strip()) + 1)')" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin
      - run: |
          # Write new crate_universe defaults.bzl file
          # Copy the new template
          cp ${{ github.workspace }}/crate_universe/private/defaults.bzl.template ${{ github.workspace }}/crate_universe/private/defaults.bzl

          # Generate the release URL
          url="${URL_PREFIX}/crate_universe_resolver-{host_triple}{extension}"
          sed -i "s|{DEFAULT_URL_TEMPLATE}|${url}|" ${{ github.workspace }}/crate_universe/private/defaults.bzl
          sed -i "s|{rc}|${RELEASE_CANDIDATE_NUMBER}|" ${{ github.workspace }}/crate_universe/private/defaults.bzl

          # Populate all sha256 values
          TARGETS=(
            aarch64-apple-darwin
            aarch64-unknown-linux-gnu
            x86_64-apple-darwin
            x86_64-pc-windows-gnu
            x86_64-unknown-linux-gnu
          )
          for triple in ${TARGETS[@]}; do
            if [[ "${triple}" == *"windows"* ]]; then
                bin_name=crate_universe_resolver.exe
            else
                bin_name=crate_universe_resolver
            fi
            sha256="$(shasum --algorithm 256 ${{ github.workspace }}/crate_universe/private/bootstrap/bin/${triple}/release/${bin_name} | awk '{ print $1 }')"
            sed -i "s|{${triple}--sha256}|${sha256}|" ${{ github.workspace }}/crate_universe/private/defaults.bzl
          done
        env:
          URL_PREFIX: https://github.com/${{ github.repository_owner }}/rules_rust/releases/download/${{ github.event.inputs.version }}
      - run: |
          # Update docs for release
          SKIP_COMMIT=1 ${{ github.workspace }}/docs/update_docs.sh
      - uses: actions/create-release@v1
        id: rules_rust_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true
          tag_name: ${{ github.event.inputs.version }}rc-${{ env.RELEASE_CANDIDATE_NUMBER }}
          release_name: ${{ github.event.inputs.version }}rc-${{ env.RELEASE_CANDIDATE_NUMBER }}
          body: ${{ github.event.inputs.version }}rc-${{ env.RELEASE_CANDIDATE_NUMBER }}
          commitish: main
      # There must be a upload action for each platform triple we create
      - name: "Upload aarch64-apple-darwin"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rules_rust_release.outputs.upload_url }}
          asset_name: crate_universe_resolver-aarch64-apple-darwin
          asset_path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin/aarch64-apple-darwin/release/crate_universe_resolver
          asset_content_type: application/octet-stream
      - name: "Upload aarch64-unknown-linux-gnu"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rules_rust_release.outputs.upload_url }}
          asset_name: crate_universe_resolver-aarch64-unknown-linux-gnu
          asset_path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin/aarch64-unknown-linux-gnu/release/crate_universe_resolver
          asset_content_type: application/octet-stream
      - name: "Upload x86_64-apple-darwin"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rules_rust_release.outputs.upload_url }}
          asset_name: crate_universe_resolver-x86_64-apple-darwin
          asset_path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin/x86_64-apple-darwin/release/crate_universe_resolver
          asset_content_type: application/octet-stream
      - name: "Upload x86_64-pc-windows-gnu"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rules_rust_release.outputs.upload_url }}
          asset_name: crate_universe_resolver-x86_64-pc-windows-gnu.exe
          asset_path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin/x86_64-pc-windows-gnu/release/crate_universe_resolver.exe
          asset_content_type: application/octet-stream
      - name: "Upload x86_64-unknown-linux-gnu"
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rules_rust_release.outputs.upload_url }}
          asset_name: crate_universe_resolver-x86_64-unknown-linux-gnu
          asset_path: ${{ github.workspace }}/crate_universe/private/bootstrap/bin/x86_64-unknown-linux-gnu/release/crate_universe_resolver
          asset_content_type: application/octet-stream
      - uses: peter-evans/create-pull-request@v3
        with:
          title: Release ${{ github.event.inputs.version }}
          commit-message: release ${{ github.event.inputs.version }}
          branch: release/${{ github.event.inputs.version }}
          delete-branch: true
          body: Release ${{ github.event.inputs.version }}

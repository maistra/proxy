test legalizer
set enable_probestack=false
set enable_jump_tables=false
target x86_64 legacy

; Test that when jump_tables_enables is false, all jump tables are eliminated.
; regex: V=v\d+
; regex: BB=block\d+

function u0:0(i64 vmctx) baldrdash_system_v {
    gv0 = vmctx
    gv1 = iadd_imm.i64 gv0, 48
    jt0 = jump_table [block2, block2, block7]
    jt1 = jump_table [block8, block8]

block0(v0: i64):
    jump block5

block5:
    v1 = global_value.i64 gv1
    v2 = load.i64 v1
    trapnz v2, interrupt
    v3 = iconst.i32 0
    br_table v3, block3, jt0
; check:  block5:
; check:    $(val0=$V) = iconst.i32 0
; nextln:   $(cmp0=$V) = icmp_imm eq $val0, 0
; nextln:   brnz $cmp0, block2
; nextln:   jump $(fail0=$BB)
; check:  $fail0:
; nextln:   $(cmp1=$V) = icmp_imm.i32 eq $val0, 1
; nextln:   brnz $cmp1, block2
; nextln:   jump $(fail1=$BB)
; check:  $fail1:
; nextln:   $(cmp2=$V) = icmp_imm.i32 eq $val0, 2
; nextln:   brnz $cmp2, block7
; nextln:   jump block3

block7:
    v4 = iconst.i32 0
    br_table v4, block3, jt1
; check:  block7:
; check:    $(val1=$V) = iconst.i32 0
; nextln:   $(cmp3=$V) = icmp_imm eq $val1, 0
; nextln:   brnz $cmp3, block8
; nextln:   jump $(fail3=$BB)
; check:  $fail3:
; nextln:   $(cmp4=$V) = icmp_imm.i32 eq $val1, 1
; nextln:   brnz $cmp4, block8
; nextln:   jump block3

block8:
    jump block5

block3:
    jump block2

block2:
    jump block1

block1:
    fallthrough_return
}
; not: jump_table

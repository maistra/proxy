test safepoint
set enable_safepoints=true
target x86_64 legacy

function %direct() -> r64 {
    fn0 = %none()
    fn1 = %one() -> r64
    fn2 = %two() -> i32, r64

block0:
    call fn0()
    v1 = call fn1()
    v2, v3 = call fn2()
    brz v2, block2
    jump block1
block1:
    return v1
block2:
    v4 = call fn1()
    return v3
}

; sameln: function %direct() -> r64 [%rax] fast {
; nextln: ss0 = spill_slot 8
; nextln: ss1 = spill_slot 8
; nextln: sig0 = () fast
; nextln: sig1 = () -> r64 [%rax] fast
; nextln: sig2 = () -> i32 [%rax], r64 [%rdx] fast
; nextln: fn0 = %none sig0
; nextln: fn1 = %one sig1
; nextln: fn2 = %two sig2
; nextln: 
; nextln: block0:
; nextln:   v5 = func_addr.i64 fn0
; nextln:   call_indirect sig0, v5()
; nextln:   v6 = func_addr.i64 fn1
; nextln:   v9 = call_indirect sig1, v6()
; nextln:   v1 = spill v9
; nextln:   v7 = func_addr.i64 fn2
; nextln:   safepoint v1
; nextln:   v2, v10 = call_indirect sig2, v7()
; nextln:   v3 = spill v10
; nextln:   brz v2, block2
; nextln:   jump block1
; nextln: 
; nextln: block1:
; nextln:   v11 = fill.r64 v1
; nextln:   regmove v11, %r15 -> %rax
; nextln:   return v11
; nextln: 
; nextln: block2:
; nextln:   v8 = func_addr.i64 fn1
; nextln:   safepoint v3
; nextln:   v4 = call_indirect sig1, v8()
; nextln:   v12 = fill.r64 v3
; nextln:   regmove v12, %r15 -> %rax
; nextln:   return v12
; nextln: }

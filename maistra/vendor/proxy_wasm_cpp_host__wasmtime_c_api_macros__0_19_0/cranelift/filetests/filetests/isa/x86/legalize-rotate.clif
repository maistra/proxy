test compile
target x86_64 legacy

; regex: V=v\d+
; regex: R=%[a-z0-9]+

function %i32_rotr(i32, i32) -> i32 fast {
block0(v0: i32, v1: i32):
    ; check: regmove v1, $R -> %rcx
    ; check: v2 = rotr v0, v1
    v2 = rotr v0, v1
    return v2
}

function %i32_rotr_imm_1(i32) -> i32 fast {
block0(v0: i32):
    ; check: $V = rotr_imm v0, 1
    v2 = rotr_imm v0, 1
    return v2
}

function %i32_rotl(i32, i32) -> i32 fast {
block0(v0: i32, v1: i32):
    ; check: regmove v1, $R -> %rcx
    ; check: v2 = rotl v0, v1
    v2 = rotl v0, v1
    return v2
}

function %i32_rotl_imm_1(i32) -> i32 fast {
block0(v0: i32):
    ; check: $V = rotl_imm v0, 1
    v2 = rotl_imm v0, 1
    return v2
}

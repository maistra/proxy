test binemit
set enable_simd
target x86_64 legacy skylake

function %arithmetic_i8x16(i8x16, i8x16) {
block0(v0: i8x16 [%xmm6], v1: i8x16 [%xmm2]):
[-, %xmm6]    v2 = iadd v0, v1        ; bin: 66 0f fc f2
[-, %xmm6]    v3 = isub v0, v1        ; bin: 66 0f f8 f2
[-, %xmm6]    v4 = sadd_sat v0, v1    ; bin: 66 0f ec f2
[-, %xmm6]    v5 = ssub_sat v0, v1    ; bin: 66 0f e8 f2
[-, %xmm6]    v6 = usub_sat v0, v1    ; bin: 66 0f d8 f2
[-, %xmm6]    v7 = avg_round v0, v1   ; bin: 66 0f e0 f2
[-, %xmm6]    v9 = iabs v1            ; bin: 66 0f 38 1c f2

    return
}

function %arithmetic_i16x8(i16x8, i16x8) {
block0(v0: i16x8 [%xmm3], v1: i16x8 [%xmm5]):
[-, %xmm3]    v2 = iadd v0, v1        ; bin: 66 0f fd dd
[-, %xmm3]    v3 = isub v0, v1        ; bin: 66 0f f9 dd
[-, %xmm3]    v4 = imul v0, v1        ; bin: 66 0f d5 dd
[-, %xmm3]    v5 = uadd_sat v0, v1    ; bin: 66 0f dd dd
[-, %xmm3]    v6 = ssub_sat v0, v1    ; bin: 66 0f e9 dd
[-, %xmm3]    v7 = usub_sat v0, v1    ; bin: 66 0f d9 dd
[-, %xmm3]    v8 = avg_round v0, v1   ; bin: 66 0f e3 dd
[-, %xmm3]    v9 = iabs v1            ; bin: 66 0f 38 1d dd

    return
}

function %arithmetic_i32x4(i32x4, i32x4) {
block0(v0: i32x4 [%xmm0], v1: i32x4 [%xmm1]):
[-, %xmm0]    v2 = iadd v0, v1        ; bin: 66 0f fe c1
[-, %xmm0]    v3 = isub v0, v1        ; bin: 66 0f fa c1
[-, %xmm0]    v4 = imul v0, v1        ; bin: 66 0f 38 40 c1
[-, %xmm0]    v5 = iabs v1            ; bin: 66 0f 38 1e c1

    return
}

function %arithmetic_i64x2(i64x2, i64x2) {
block0(v0: i64x2 [%xmm0], v1: i64x2 [%xmm2]):
[-, %xmm0]    v2 = iadd v0, v1        ; bin: 66 0f d4 c2
[-, %xmm0]    v3 = isub v0, v1        ; bin: 66 0f fb c2

    return
}

function %arithmetic_i64x2_rex(i64x2, i64x2) {
block0(v0: i64x2 [%xmm8], v1: i64x2 [%xmm10]):
[-, %xmm8]    v2 = iadd v0, v1        ; bin: 66 45 0f d4 c2
[-, %xmm8]    v3 = isub v0, v1        ; bin: 66 45 0f fb c2

    return
}

function %arithmetic_f32x4(f32x4, f32x4) {
block0(v0: f32x4 [%xmm3], v1: f32x4 [%xmm5]):
[-, %xmm3]    v2 = fadd v0, v1      ; bin: 0f 58 dd
[-, %xmm3]    v3 = fsub v0, v1      ; bin: 0f 5c dd
[-, %xmm3]    v4 = fmul v0, v1      ; bin: 0f 59 dd
[-, %xmm3]    v5 = fdiv v0, v1      ; bin: 0f 5e dd
[-, %xmm3]    v6 = x86_fmin v0, v1  ; bin: 0f 5d dd
[-, %xmm3]    v7 = x86_fmax v0, v1  ; bin: 0f 5f dd
[-, %xmm3]    v8 = sqrt v0          ; bin: 0f 51 db
    return
}

function %arithmetic_f32x4_rex(f32x4, f32x4) {
block0(v0: f32x4 [%xmm3], v1: f32x4 [%xmm10]):
[-, %xmm3]    v2 = fadd v0, v1      ; bin: 41 0f 58 da
[-, %xmm3]    v3 = fsub v0, v1      ; bin: 41 0f 5c da
[-, %xmm3]    v4 = fmul v0, v1      ; bin: 41 0f 59 da
[-, %xmm3]    v5 = fdiv v0, v1      ; bin: 41 0f 5e da
[-, %xmm3]    v6 = x86_fmin v0, v1  ; bin: 41 0f 5d da
[-, %xmm3]    v7 = x86_fmax v0, v1  ; bin: 41 0f 5f da
[-, %xmm3]    v8 = sqrt v1          ; bin: 41 0f 51 da
    return
}

function %arithmetic_f64x2(f64x2, f64x2) {
block0(v0: f64x2 [%xmm3], v1: f64x2 [%xmm5]):
[-, %xmm3]    v2 = fadd v0, v1      ; bin: 66 0f 58 dd
[-, %xmm3]    v3 = fsub v0, v1      ; bin: 66 0f 5c dd
[-, %xmm3]    v4 = fmul v0, v1      ; bin: 66 0f 59 dd
[-, %xmm3]    v5 = fdiv v0, v1      ; bin: 66 0f 5e dd
[-, %xmm3]    v6 = x86_fmin v0, v1  ; bin: 66 0f 5d dd
[-, %xmm3]    v7 = x86_fmax v0, v1  ; bin: 66 0f 5f dd
[-, %xmm3]    v8 = sqrt v0          ; bin: 66 0f 51 db
    return
}

function %arithmetic_f64x2_rex(f64x2, f64x2) {
block0(v0: f64x2 [%xmm11], v1: f64x2 [%xmm13]):
[-, %xmm11]    v2 = fadd v0, v1      ; bin: 66 45 0f 58 dd
[-, %xmm11]    v3 = fsub v0, v1      ; bin: 66 45 0f 5c dd
[-, %xmm11]    v4 = fmul v0, v1      ; bin: 66 45 0f 59 dd
[-, %xmm11]    v5 = fdiv v0, v1      ; bin: 66 45 0f 5e dd
[-, %xmm11]    v6 = x86_fmin v0, v1  ; bin: 66 45 0f 5d dd
[-, %xmm11]    v7 = x86_fmax v0, v1  ; bin: 66 45 0f 5f dd
[-, %xmm11]    v8 = sqrt v0          ; bin: 66 45 0f 51 db
    return
}

function %pmuludq(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2 [%xmm3], v1: i64x2 [%xmm5]):
[-, %xmm3]    v2 = x86_pmuludq v0, v1      ; bin: 66 0f f4 dd
    return v2
}

function %pmaddwd(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8 [%xmm8], v1: i16x8 [%xmm9]):
[-, %xmm8]    v2 = widening_pairwise_dot_product_s v0, v1      ; bin: 66 45 0f f5 c1
    return v2
}

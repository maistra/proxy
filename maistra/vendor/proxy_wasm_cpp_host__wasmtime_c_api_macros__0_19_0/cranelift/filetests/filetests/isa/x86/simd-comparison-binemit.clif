test binemit
set enable_simd
target x86_64 legacy skylake

function %icmp_i8x16() {
block0:
[-, %xmm3]  v0 = vconst.i8x16 0x00                                  ; bin: 66 0f ef db
[-, %xmm4]  v1 = vconst.i8x16 0xffffffffffffffffffffffffffffffff    ; bin: 66 0f 74 e4
[-, %xmm3]  v2 = icmp eq v0, v1                                     ; bin: 66 0f 74 dc
            return
}

function %icmp_i16x8_rex() {
block0:
[-, %xmm0]  v0 = vconst.i16x8 0x00
[-, %xmm15] v1 = vconst.i16x8 0xffffffffffffffffffffffffffffffff
[-, %xmm0]  v2 = icmp eq v0, v1                                     ; bin: 66 41 0f 75 c7
            return
}

function %icmp_i32x4() {
block0:
[-, %xmm0]  v0 = vconst.i32x4 0x00
[-, %xmm4]  v1 = vconst.i32x4 0xffffffffffffffffffffffffffffffff
[-, %xmm0]  v2 = icmp eq v0, v1                                     ; bin: 66 0f 76 c4
            return
}

function %icmp_i64x2_rex() {
block0:
[-, %xmm8]  v0 = vconst.i64x2 0x00
[-, %xmm1]  v1 = vconst.i64x2 0xffffffffffffffffffffffffffffffff
[-, %xmm8]  v2 = icmp eq v0, v1                                     ; bin: 66 44 0f 38 29 c1
            return
}

function %icmp_sgt_i8x16(i8x16, i8x16) -> b8x16 {
block0(v0: i8x16 [%xmm2], v1: i8x16 [%xmm1]):
[-, %xmm2]  v2 = icmp sgt v0, v1     ; bin: 66 0f 64 d1
            return v2
}

function %icmp_sgt_i16x8(i16x8, i16x8) -> b16x8 {
block0(v0: i16x8 [%xmm4], v1: i16x8 [%xmm3]):
[-, %xmm4]  v2 = icmp sgt v0, v1     ; bin: 66 0f 65 e3
            return v2
}

function %icmp_sgt_i32x4(i32x4, i32x4) -> b32x4 {
block0(v0: i32x4 [%xmm6], v1: i32x4 [%xmm5]):
[-, %xmm6]  v2 = icmp sgt v0, v1     ; bin: 66 0f 66 f5
            return v2
}

function %icmp_sgt_i64x2(i64x2, i64x2) -> b64x2 {
block0(v0: i64x2 [%xmm0], v1: i64x2 [%xmm7]):
[-, %xmm0]  v2 = icmp sgt v0, v1     ; bin: 66 0f 38 37 c7
            return v2
}

function %min_max_i8x16(i8x16, i8x16) {
block0(v0: i8x16 [%xmm3], v1: i8x16 [%xmm1]):
[-, %xmm3]  v2 = x86_pmaxs v0, v1     ; bin: 66 0f 38 3c d9
[-, %xmm3]  v3 = x86_pmaxu v0, v1     ; bin: 66 0f de d9
[-, %xmm3]  v4 = x86_pmins v0, v1     ; bin: 66 0f 38 38 d9
[-, %xmm3]  v5 = x86_pminu v0, v1     ; bin: 66 0f da d9
            return
}

function %min_max_i16x8(i16x8, i16x8) {
block0(v0: i16x8 [%xmm2], v1: i16x8 [%xmm5]):
[-, %xmm2]  v2 = x86_pmaxs v0, v1     ; bin: 66 0f ee d5
[-, %xmm2]  v3 = x86_pmaxu v0, v1     ; bin: 66 0f 38 3e d5
[-, %xmm2]  v4 = x86_pmins v0, v1     ; bin: 66 0f ea d5
[-, %xmm2]  v5 = x86_pminu v0, v1     ; bin: 66 0f 38 3a d5
            return
}

function %min_max_i32x4(i32x4, i32x4) {
block0(v0: i32x4 [%xmm2], v1: i32x4 [%xmm4]):
[-, %xmm2]  v2 = x86_pmaxs v0, v1     ; bin: 66 0f 38 3d d4
[-, %xmm2]  v3 = x86_pmaxu v0, v1     ; bin: 66 0f 38 3f d4
[-, %xmm2]  v4 = x86_pmins v0, v1     ; bin: 66 0f 38 39 d4
[-, %xmm2]  v5 = x86_pminu v0, v1     ; bin: 66 0f 38 3b d4
            return
}

function %fcmp_f32x4(f32x4, f32x4) {
block0(v0: f32x4 [%xmm2], v1: f32x4 [%xmm4]):
[-, %xmm2]  v2 = fcmp eq v0, v1     ; bin: 0f c2 d4 00
[-, %xmm2]  v3 = fcmp lt v0, v1     ; bin: 0f c2 d4 01
[-, %xmm2]  v4 = fcmp le v0, v1     ; bin: 0f c2 d4 02
[-, %xmm2]  v5 = fcmp uno v0, v1    ; bin: 0f c2 d4 03
[-, %xmm2]  v6 = fcmp ne v0, v1     ; bin: 0f c2 d4 04
[-, %xmm2]  v7 = fcmp uge v0, v1    ; bin: 0f c2 d4 05
[-, %xmm2]  v8 = fcmp ugt v0, v1    ; bin: 0f c2 d4 06
[-, %xmm2]  v9 = fcmp ord v0, v1    ; bin: 0f c2 d4 07
            return
}

function %fcmp_f32x4_rex(f32x4, f32x4) {
block0(v0: f32x4 [%xmm8], v1: f32x4 [%xmm8]):
[-, %xmm8]  v2 = fcmp eq v0, v1     ; bin: 45 0f c2 c0 00
[-, %xmm8]  v3 = fcmp lt v0, v1     ; bin: 45 0f c2 c0 01
[-, %xmm8]  v4 = fcmp le v0, v1     ; bin: 45 0f c2 c0 02
[-, %xmm8]  v5 = fcmp uno v0, v1    ; bin: 45 0f c2 c0 03
[-, %xmm8]  v6 = fcmp ne v0, v1     ; bin: 45 0f c2 c0 04
[-, %xmm8]  v7 = fcmp uge v0, v1    ; bin: 45 0f c2 c0 05
[-, %xmm8]  v8 = fcmp ugt v0, v1    ; bin: 45 0f c2 c0 06
[-, %xmm8]  v9 = fcmp ord v0, v1    ; bin: 45 0f c2 c0 07
            return
}

function %fcmp_f64x2(f64x2, f64x2) {
block0(v0: f64x2 [%xmm2], v1: f64x2 [%xmm0]):
[-, %xmm2]  v2 = fcmp eq v0, v1     ; bin: 66 0f c2 d0 00
[-, %xmm2]  v3 = fcmp lt v0, v1     ; bin: 66 0f c2 d0 01
[-, %xmm2]  v4 = fcmp le v0, v1     ; bin: 66 0f c2 d0 02
[-, %xmm2]  v5 = fcmp uno v0, v1    ; bin: 66 0f c2 d0 03
[-, %xmm2]  v6 = fcmp ne v0, v1     ; bin: 66 0f c2 d0 04
[-, %xmm2]  v7 = fcmp uge v0, v1    ; bin: 66 0f c2 d0 05
[-, %xmm2]  v8 = fcmp ugt v0, v1    ; bin: 66 0f c2 d0 06
[-, %xmm2]  v9 = fcmp ord v0, v1    ; bin: 66 0f c2 d0 07
            return
}

function %fcmp_f64x2_rex(f64x2, f64x2) {
block0(v0: f64x2 [%xmm9], v1: f64x2 [%xmm11]):
[-, %xmm9]  v2 = fcmp eq v0, v1     ; bin: 66 45 0f c2 cb 00
[-, %xmm9]  v3 = fcmp lt v0, v1     ; bin: 66 45 0f c2 cb 01
[-, %xmm9]  v4 = fcmp le v0, v1     ; bin: 66 45 0f c2 cb 02
[-, %xmm9]  v5 = fcmp uno v0, v1    ; bin: 66 45 0f c2 cb 03
[-, %xmm9]  v6 = fcmp ne v0, v1     ; bin: 66 45 0f c2 cb 04
[-, %xmm9]  v7 = fcmp uge v0, v1    ; bin: 66 45 0f c2 cb 05
[-, %xmm9]  v8 = fcmp ugt v0, v1    ; bin: 66 45 0f c2 cb 06
[-, %xmm9]  v9 = fcmp ord v0, v1    ; bin: 66 45 0f c2 cb 07
            return
}

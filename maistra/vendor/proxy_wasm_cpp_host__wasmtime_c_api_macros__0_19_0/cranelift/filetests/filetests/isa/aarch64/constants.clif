test compile
set unwind_info=false
target aarch64

function %f() -> b8 {
block0:
  v0 = bconst.b8 true
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #255
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> b16 {
block0:
  v0 = bconst.b16 false
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #0
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #0
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #65535
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #65535, LSL #16
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff00000000
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #65535, LSL #32
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff000000000000
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #65535, LSL #48
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffffffff
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #0
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffffffff0000
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #65535
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffffffff0000ffff
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #65535, LSL #16
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xffff0000ffffffff
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #65535, LSL #32
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x0000ffffffffffff
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #65535, LSL #48
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xf34bf0a31212003a ; random digits
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #58
; nextln: movk x0, #4626, LSL #16
; nextln: movk x0, #61603, LSL #32
; nextln: movk x0, #62283, LSL #48
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e900001ef40000 ; random digits with 2 clear half words
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movz x0, #7924, LSL #16
; nextln: movk x0, #4841, LSL #48
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0x12e9ffff1ef4ffff ; random digits with 2 full half words
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #57611, LSL #16
; nextln: movk x0, #4841, LSL #48
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 -1
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: orr x0, xzr, #4294967295
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i32 {
block0:
  v0 = iconst.i32 0xfffffff7
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn w0, #8
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffff7
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn w0, #8
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

function %f() -> i64 {
block0:
  v0 = iconst.i64 0xfffffffffffffff7
  return v0
}

; check: stp fp, lr, [sp, #-16]!
; nextln: mov fp, sp
; nextln: movn x0, #8
; nextln: ldp fp, lr, [sp], #16
; nextln: ret

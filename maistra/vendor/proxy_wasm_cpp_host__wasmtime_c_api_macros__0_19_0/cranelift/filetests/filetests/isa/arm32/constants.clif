test compile
target arm
feature "experimental_arm32"

function %b1() -> b1 {
block0:
    v0 = bconst.b1 true
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %b8() -> b8 {
block0:
    v0 = bconst.b8 false
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #0
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %b16() -> b16 {
block0:
    v0 = bconst.b16 true
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #1
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %b32() -> b32 {
block0:
    v0 = bconst.b32 false
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #0
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %i8() -> i8 {
block0:
    v0 = iconst.i8 0xff
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #255
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %i8() -> i16 {
block0:
    v0 = iconst.i16 0xffff
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #65535
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %f() -> i32 {
block0:
    v0 = iconst.i32 0xffff
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #65535
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

function %f() -> i32 {
block0:
    v0 = iconst.i32 0xffffffff
    return v0
}

; check: push {fp, lr}
; nextln: mov fp, sp
; nextln: mov r0, #65535
; nextln: movt r0, #65535
; nextln: mov sp, fp
; nextln: pop {fp, lr}
; nextln: bx lr

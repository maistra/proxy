load("@{rules_go_repo_name}//go/private/rules:binary.bzl", "go_tool_binary")
load("@{rules_go_repo_name}//go/private/rules:sdk.bzl", "package_list")
load("@{rules_go_repo_name}//go:def.bzl", "declare_toolchains", "go_sdk")
load("@bazel_skylib//lib:selects.bzl", "selects")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "libs",
    srcs = glob(
        ["pkg/{goos}_{goarch}/**/*.a"],
        exclude = ["pkg/{goos}_{goarch}/**/cmd/**"],
    ),
)

filegroup(
    name = "headers",
    srcs = glob(["pkg/include/*.h"]),
)

filegroup(
    name = "srcs",
    srcs = glob(["src/**"]),
)

filegroup(
    name = "tools",
    srcs = glob([
        "pkg/tool/**",
        "bin/gofmt*",
    ]),
)

go_sdk(
    name = "go_sdk",
    srcs = [":srcs"],
    go = "bin/go{exe}",
    goarch = "{goarch}",
    goos = "{goos}",
    headers = [":headers"],
    libs = [":libs"],
    package_list = ":package_list",
    root_file = "ROOT",
    tools = [":tools"],
)

go_tool_binary(
    name = "builder",
    srcs = ["@{rules_go_repo_name}//go/tools/builders:builder_srcs"],
    sdk = ":go_sdk",
)

# TODO(jayconrod): Gazelle depends on this file directly. This dependency
# should be broken, and this rule should be folded into go_sdk.
package_list(
    name = "package_list",
    srcs = [":srcs"],
    out = "packages.txt",
    root_file = "ROOT",
)

sdk_version_label = "@{rules_go_repo_name}//go/toolchain:sdk_version"

config_setting(
    name = "match_all_versions",
    flag_values = {
        sdk_version_label: "",
    },
)

config_setting(
    name = "match_major_version",
    flag_values = {
        sdk_version_label: "{major_version}",
    },
)

config_setting(
    name = "match_major_minor_version",
    flag_values = {
        sdk_version_label: "{major_version}.{minor_version}",
    },
)

config_setting(
    name = "match_patch_version",
    flag_values = {
        sdk_version_label: "{major_version}.{minor_version}.{patch_version}",
    },
)

# If prerelease version is "", this will be the same as ":match_patch_version", but that's fine since we use match_any in config_setting_group.
config_setting(
    name = "match_prerelease_version",
    flag_values = {
        sdk_version_label: "{major_version}.{minor_version}.{patch_version}{prerelease_suffix}",
    },
)

selects.config_setting_group(
    name = "sdk_version_setting",
    match_any = [
        ":match_all_versions",
        ":match_major_version",
        ":match_major_minor_version",
        ":match_patch_version",
        ":match_prerelease_version",
    ],
)

declare_toolchains(
    builder = ":builder",
    host = "{goos}_{goarch}",
    sdk = ":go_sdk",
    sdk_version_setting = ":sdk_version_setting",
)

filegroup(
    name = "files",
    srcs = glob([
        "bin/go*",
        "src/**",
        "pkg/**",
    ]),
)

exports_files(
    glob([
        "lib/time/zoneinfo.zip",
        "misc/wasm/**",
    ]),
    visibility = ["//visibility:public"],
)

load(
    "@rules_foreign_cc//foreign_cc/private/framework/toolchains:linux_commands.bzl",
    "assert_script_errors",
    "cat",
    "children_to_path",
    "cleanup_function",
    "copy_dir_contents_to_dir",
    "define_absolute_paths",
    "define_function",
    "define_sandbox_paths",
    "disable_tracing",
    "echo",
    "enable_tracing",
    "env",
    "export_var",
    "if_else",
    "increment_pkg_config_path",
    "local_var",
    "mkdirs",
    "path",
    "pwd",
    "redirect_out_err",
    "replace_absolute_paths",
    "replace_in_files",
    "replace_sandbox_paths",
    "replace_symlink",
    "rm_rf",
    "script_extension",
    "script_prelude",
    "shebang",
    "symlink_contents_to_dir",
    "symlink_to_dir",
    "touch",
    "use_var",
)

commands = struct(
    assert_script_errors = assert_script_errors,
    cat = cat,
    children_to_path = children_to_path,
    cleanup_function = cleanup_function,
    copy_dir_contents_to_dir = copy_dir_contents_to_dir,
    define_absolute_paths = define_absolute_paths,
    define_function = define_function,
    define_sandbox_paths = define_sandbox_paths,
    disable_tracing = disable_tracing,
    echo = echo,
    enable_tracing = enable_tracing,
    env = env,
    export_var = export_var,
    if_else = if_else,
    increment_pkg_config_path = increment_pkg_config_path,
    local_var = local_var,
    mkdirs = mkdirs,
    path = path,
    pwd = pwd,
    redirect_out_err = redirect_out_err,
    replace_absolute_paths = replace_absolute_paths,
    replace_in_files = replace_in_files,
    replace_sandbox_paths = replace_sandbox_paths,
    replace_symlink = replace_symlink,
    rm_rf = rm_rf,
    script_extension = script_extension,
    script_prelude = script_prelude,
    shebang = shebang,
    symlink_contents_to_dir = symlink_contents_to_dir,
    symlink_to_dir = symlink_to_dir,
    touch = touch,
    use_var = use_var,
)

def _foreign_cc_framework_toolchain_impl(ctx):
    return platform_common.ToolchainInfo(
        commands = commands,
    )

foreign_cc_framework_toolchain = rule(
    doc = "A toolchain contianing foreign_cc commands",
    implementation = _foreign_cc_framework_toolchain_impl,
)

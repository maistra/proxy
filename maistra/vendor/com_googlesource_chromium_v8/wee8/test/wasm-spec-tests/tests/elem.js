
'use strict';

let externrefs = {};
let externsym = Symbol("externref");
function externref(s) {
  if (! (s in externrefs)) externrefs[s] = {[externsym]: s};
  return externrefs[s];
}
function is_externref(x) {
  return (x !== null && externsym in x) ? 1 : 0;
}
function is_funcref(x) {
  return typeof x === "function" ? 1 : 0;
}
function eq_externref(x, y) {
  return x === y ? 1 : 0;
}
function eq_funcref(x, y) {
  return x === y ? 1 : 0;
}

let spectest = {
  externref: externref,
  is_externref: is_externref,
  is_funcref: is_funcref,
  eq_externref: eq_externref,
  eq_funcref: eq_funcref,
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_i64: 666n,
  global_f32: 666,
  global_f64: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};

let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(instance) {
  return {module: instance.exports, spectest: spectest};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, ...expected) {
  let actual = action();
  if (actual === undefined) {
    actual = [];
  } else if (!Array.isArray(actual)) {
    actual = [actual];
  }
  if (actual.length !== expected.length) {
    throw new Error(expected.length + " value(s) expected, got " + actual.length);
  }
  for (let i = 0; i < actual.length; ++i) {
    switch (expected[i]) {
      case "nan:canonical":
      case "nan:arithmetic":
      case "nan:any":
        // Note that JS can't reliably distinguish different NaN values,
        // so there's no good way to test that it's a canonical NaN.
        if (!Number.isNaN(actual[i])) {
          throw new Error("Wasm return value NaN expected, got " + actual[i]);
        };
        return;
      case "ref.func":
        if (typeof actual[i] !== "function") {
          throw new Error("Wasm function return value expected, got " + actual[i]);
        };
        return;
      case "ref.extern":
        if (actual[i] === null) {
          throw new Error("Wasm reference return value expected, got " + actual[i]);
        };
        return;
      default:
        if (!Object.is(actual[i], expected[i])) {
          throw new Error("Wasm return value " + expected[i] + " expected, got " + actual[i]);
        };
    }
  }
}

// elem.wast:4
let $1 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x99\x83\x80\x80\x00\x3c\x01\x00\x00\x05\x70\x04\xd2\x00\x0b\xd2\x00\x0b\xd0\x70\x0b\xd2\x01\x0b\x01\x00\x00\x01\x00\x04\x00\x00\x01\x01\x01\x00\x00\x05\x70\x04\xd2\x00\x0b\xd2\x00\x0b\xd0\x70\x0b\xd2\x01\x0b\x01\x00\x00\x01\x00\x04\x00\x00\x01\x01\x00\x41\x00\x0b\x00\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd0\x70\x0b\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x01\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x01\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd0\x70\x0b\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd0\x70\x0b\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd0\x70\x0b\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x01\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x01\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd0\x70\x0b\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x00\x04\x41\x00\x0b\x02\xd2\x00\x0b\xd0\x70\x0b\x00\x41\x00\x0b\x02\x00\x00\x00\x41\x00\x0b\x02\x00\x00\x03\x00\x00\x07\x70\x04\xd2\x00\x0b\xd2\x00\x0b\xd0\x70\x0b\xd2\x01\x0b\x03\x00\x00\x03\x00\x04\x00\x00\x01\x01\x03\x00\x00\x07\x70\x04\xd2\x00\x0b\xd2\x00\x0b\xd0\x70\x0b\xd2\x01\x0b\x03\x00\x00\x03\x00\x04\x00\x00\x01\x01\x0a\x8f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:79
let $2 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x03\x03\x09\x8f\x80\x80\x80\x00\x01\x04\x41\x00\x0b\x03\xd2\x00\x0b\xd0\x70\x0b\xd2\x01\x0b\x0a\x8f\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:89
let $3 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:94
let $4 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:100
let $5 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x9f\x80\x80\x80\x00\x05\x00\x41\x00\x0b\x01\x00\x00\x41\x03\x0b\x01\x00\x00\x41\x07\x0b\x01\x00\x00\x41\x05\x0b\x01\x00\x00\x41\x03\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:109
let $6 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x9f\x80\x80\x80\x00\x05\x00\x41\x09\x0b\x01\x00\x00\x41\x03\x0b\x01\x00\x00\x41\x07\x0b\x01\x00\x00\x41\x03\x0b\x01\x00\x00\x41\x05\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:119
let $7 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x98\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x03\x7f\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x85\x80\x80\x80\x00\x01\x70\x00\xe8\x07\x09\x87\x80\x80\x80\x00\x01\x00\x23\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:126
let $8 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x98\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x5f\x69\x33\x32\x03\x7f\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x85\x80\x80\x80\x00\x01\x70\x00\xe8\x07\x09\x87\x80\x80\x80\x00\x01\x00\x23\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:133
let $9 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x85\x80\x80\x80\x00\x04\x00\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x93\x80\x80\x80\x00\x02\x06\x63\x61\x6c\x6c\x2d\x37\x00\x02\x06\x63\x61\x6c\x6c\x2d\x39\x00\x03\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x07\x0b\x01\x00\x00\x41\x09\x0b\x01\x01\x0a\xad\x80\x80\x80\x00\x04\x85\x80\x80\x80\x00\x00\x41\xc1\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xc2\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x07\x11\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x09\x11\x00\x00\x0b");

// elem.wast:147
assert_return(() => call($9, "call-7", []), 65);

// elem.wast:148
assert_return(() => call($9, "call-9", []), 66);

// elem.wast:152
let $10 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x87\x80\x80\x80\x00\x01\x00\x41\x09\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:157
let $11 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x09\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:163
let $12 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x09\x86\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x00");

// elem.wast:167
let $13 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00\x09\x86\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x00");

// elem.wast:172
let $14 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x00\x00\x09\x86\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x00");

// elem.wast:177
let $15 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x14\x09\x86\x80\x80\x80\x00\x01\x00\x41\x14\x0b\x00");

// elem.wast:182
let $16 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:188
let $17 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x00\x64\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:194
let $18 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x01\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:200
let $19 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x95\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x01\x00\x1e\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x01\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:208
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:217
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x00\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:226
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:235
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x00\x09\x86\x80\x80\x80\x00\x01\x00\x41\x01\x0b\x00");

// elem.wast:242
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:250
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:259
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x85\x80\x80\x80\x00\x01\x70\x01\x0a\x14\x09\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:267
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x0a\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:276
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x87\x80\x80\x80\x00\x01\x00\x41\x7f\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:284
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x7f\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:293
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x09\x87\x80\x80\x80\x00\x01\x00\x41\x76\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:301
assert_uninstantiable("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x76\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:312
let $20 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x69\x6e\x69\x74\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x41\x01\xfc\x0c\x00\x00\x0b");

// elem.wast:320
assert_trap(() => call($20, "init", []));

// elem.wast:322
let $21 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x83\x80\x80\x80\x00\x02\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x88\x80\x80\x80\x00\x01\x04\x69\x6e\x69\x74\x00\x01\x09\x85\x80\x80\x80\x00\x01\x03\x00\x01\x00\x0a\x99\x80\x80\x80\x00\x02\x82\x80\x80\x80\x00\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x00\x41\x01\xfc\x0c\x00\x00\x0b");

// elem.wast:330
assert_trap(() => call($21, "init", []));

// elem.wast:334
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x00\x0a\x88\x80\x80\x80\x00\x01\x82\x80\x80\x80\x00\x00\x0b");

// elem.wast:344
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x86\x80\x80\x80\x00\x01\x00\x42\x00\x0b\x00");

// elem.wast:352
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x84\x80\x80\x80\x00\x01\x00\x0b\x00");

// elem.wast:360
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x88\x80\x80\x80\x00\x01\x00\x41\x00\x41\x00\x0b\x00");

// elem.wast:368
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7f\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x88\x80\x80\x80\x00\x01\x00\x23\x00\x23\x00\x0b\x00");

// elem.wast:377
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7f\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x88\x80\x80\x80\x00\x01\x00\x23\x00\x41\x00\x0b\x00");

// elem.wast:387
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x68\x0b\x00");

// elem.wast:395
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x85\x80\x80\x80\x00\x01\x00\x01\x0b\x00");

// elem.wast:403
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x01\x41\x00\x0b\x00");

// elem.wast:411
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x01\x0b\x00");

// elem.wast:425
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x86\x80\x80\x80\x00\x01\x00\x23\x00\x0b\x00");

// elem.wast:433
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0a\x67\x6c\x6f\x62\x61\x6c\x2d\x69\x33\x32\x03\x7f\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x86\x80\x80\x80\x00\x01\x00\x23\x01\x0b\x00");

// elem.wast:442
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x02\x98\x80\x80\x80\x00\x01\x04\x74\x65\x73\x74\x0e\x67\x6c\x6f\x62\x61\x6c\x2d\x6d\x75\x74\x2d\x69\x33\x32\x03\x7f\x01\x04\x84\x80\x80\x80\x00\x01\x70\x00\x01\x09\x86\x80\x80\x80\x00\x01\x00\x23\x00\x0b\x00");

// elem.wast:453
let $22 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x84\x80\x80\x80\x00\x03\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\x94\x80\x80\x80\x00\x01\x10\x63\x61\x6c\x6c\x2d\x6f\x76\x65\x72\x77\x72\x69\x74\x74\x65\x6e\x00\x02\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x09\x0b\x01\x00\x00\x41\x09\x0b\x01\x01\x0a\xa1\x80\x80\x80\x00\x03\x85\x80\x80\x80\x00\x00\x41\xc1\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xc2\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x09\x11\x00\x00\x0b");

// elem.wast:464
assert_return(() => call($22, "call-overwritten", []), 66);

// elem.wast:466
let $23 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x05\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x84\x80\x80\x80\x00\x03\x00\x00\x00\x07\x9c\x80\x80\x80\x00\x01\x18\x63\x61\x6c\x6c\x2d\x6f\x76\x65\x72\x77\x72\x69\x74\x74\x65\x6e\x2d\x65\x6c\x65\x6d\x65\x6e\x74\x00\x02\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x09\x0b\x01\x00\x00\x41\x09\x0b\x01\x01\x0a\xa1\x80\x80\x80\x00\x03\x85\x80\x80\x80\x00\x00\x41\xc1\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xc2\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x09\x11\x00\x00\x0b");

// elem.wast:477
assert_return(() => call($23, "call-overwritten-element", []), 66);

// elem.wast:481
let $24 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x03\x86\x80\x80\x80\x00\x05\x00\x00\x00\x00\x00\x04\x84\x80\x80\x80\x00\x01\x70\x00\x0a\x07\xab\x80\x80\x80\x00\x04\x0c\x73\x68\x61\x72\x65\x64\x2d\x74\x61\x62\x6c\x65\x01\x00\x06\x63\x61\x6c\x6c\x2d\x37\x00\x02\x06\x63\x61\x6c\x6c\x2d\x38\x00\x03\x06\x63\x61\x6c\x6c\x2d\x39\x00\x04\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x08\x0b\x01\x00\x00\x41\x09\x0b\x01\x01\x0a\xb9\x80\x80\x80\x00\x05\x85\x80\x80\x80\x00\x00\x41\xc1\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xc2\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x07\x11\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x08\x11\x00\x00\x0b\x87\x80\x80\x80\x00\x00\x41\x09\x11\x00\x00\x0b");
let $module1 = $24;

// elem.wast:499
register("module1", $module1)

// elem.wast:501
assert_trap(() => call($module1, "call-7", []));

// elem.wast:502
assert_return(() => call($module1, "call-8", []), 65);

// elem.wast:503
assert_return(() => call($module1, "call-9", []), 66);

// elem.wast:505
let $25 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x9a\x80\x80\x80\x00\x01\x07\x6d\x6f\x64\x75\x6c\x65\x31\x0c\x73\x68\x61\x72\x65\x64\x2d\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x83\x80\x80\x80\x00\x02\x00\x00\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x07\x0b\x01\x00\x00\x41\x08\x0b\x01\x01\x0a\x95\x80\x80\x80\x00\x02\x85\x80\x80\x80\x00\x00\x41\xc3\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xc4\x00\x0b");
let $module2 = $25;

// elem.wast:514
assert_return(() => call($module1, "call-7", []), 67);

// elem.wast:515
assert_return(() => call($module1, "call-8", []), 68);

// elem.wast:516
assert_return(() => call($module1, "call-9", []), 66);

// elem.wast:518
let $26 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x60\x00\x01\x7f\x02\x9a\x80\x80\x80\x00\x01\x07\x6d\x6f\x64\x75\x6c\x65\x31\x0c\x73\x68\x61\x72\x65\x64\x2d\x74\x61\x62\x6c\x65\x01\x70\x00\x0a\x03\x83\x80\x80\x80\x00\x02\x00\x00\x09\x8d\x80\x80\x80\x00\x02\x00\x41\x08\x0b\x01\x00\x00\x41\x09\x0b\x01\x01\x0a\x95\x80\x80\x80\x00\x02\x85\x80\x80\x80\x00\x00\x41\xc5\x00\x0b\x85\x80\x80\x80\x00\x00\x41\xc6\x00\x0b");
let $module3 = $26;

// elem.wast:527
assert_return(() => call($module1, "call-7", []), 67);

// elem.wast:528
assert_return(() => call($module1, "call-8", []), 69);

// elem.wast:529
assert_return(() => call($module1, "call-9", []), 70);

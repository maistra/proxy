
_GENRULE_CMD = {"@envoy//bazel/external:wee8.genrule_cmd": "#!/bin/bash\n\nset -e\n\n# Works on Linux-{x86_64,s390x,aarch64,ppc64le} and macOS-{x86_64,arm64}.\nARCH=\"$$(uname -m)\"\nSYSTEM=\"$$(uname -s)\"\nPLATFORM=\"$${SYSTEM}-$${ARCH}\"\n\ncase $${PLATFORM} in\nLinux-x86_64|Linux-s390x|Linux-aarch64|Linux-ppc64le)\n  ;;\nDarwin-x86_64|Darwin-arm64)\n  ;;\nMSYS_NT-*-x86_64)\n  echo \"WARNING: wee8 is currently untested on $${PLATFORM}.\" >&2\n  ;;\n*)\n  echo \"ERROR: wee8 is currently not supported on $${PLATFORM}.\" >&2\n  exit 1\nesac\n\n# Bazel magic.\nROOT=$$(dirname $(rootpath wee8/BUILD.gn))/..\npushd $$ROOT/wee8\n\n# Clean after previous build.\nrm -rf out/wee8\n\n# Export compiler configuration.\nexport CXXFLAGS=\"$${CXXFLAGS-} -Wno-sign-compare -Wno-deprecated-copy\"\nif [[ ( $${SYSTEM} == \"Darwin\" && $${CXX-} == \"\" ) || $${CXX-} == *clang* ]]; then\n  export CC=$${CC:-clang}\n  export CXX=$${CXX:-clang++}\nelse\n  export CC=$${CC:-gcc}\n  export CXX=$${CXX:-g++}\nfi\n\nif $${CXX} --version 2>&1 | grep -q clang ; then\n  export IS_CLANG=true\n  export CXXFLAGS=\"$${CXXFLAGS} -Wno-implicit-int-float-conversion -Wno-builtin-assume-aligned-alignment -Wno-final-dtor-non-final-class -Wno-invalid-constexpr -Wno-unknown-warning-option -Wno-range-loop-analysis -Wno-shorten-64-to-32\"\nelse\n  export IS_CLANG=false\nfi\n\nexport AR=$${AR:-ar}\nexport NM=$${NM:-nm}\n\n# Hook sanitizers.\nif [[ $${ENVOY_ASAN-} == \"1\" ]]; then\n  WEE8_BUILD_ARGS+=\" is_asan=true\"\n  WEE8_BUILD_ARGS+=\" is_lsan=true\"\nfi\nif [[ $${ENVOY_UBSAN_VPTR-} == \"1\" ]]; then\n  WEE8_BUILD_ARGS+=\" is_ubsan=true\"\n  WEE8_BUILD_ARGS+=\" is_ubsan_vptr=true\"\nfi\nif [[ $${ENVOY_MSAN-} == \"1\" ]]; then\n  WEE8_BUILD_ARGS+=\" is_msan=true\"\n  WEE8_BUILD_ARGS+=\" msan_track_origins=2\"\n  export LDFLAGS=\"$${LDFLAGS} -L/opt/libcxx_msan/lib -Wl,-rpath,/opt/libcxx_msan/lib\"\nfi\nif [[ $${ENVOY_TSAN-} == \"1\" ]]; then\n  WEE8_BUILD_ARGS+=\" is_tsan=true\"\n  export LDFLAGS=\"$${LDFLAGS} -L/opt/libcxx_tsan/lib -Wl,-rpath,/opt/libcxx_tsan/lib\"\nfi\n\n# Debug/release build.\nif [[ $(COMPILATION_MODE) == \"dbg\" && $${ENVOY_UBSAN_VPTR-} != \"1\" && $${ENVOY_MSAN-} != \"1\" && $${ENVOY_TSAN-} != \"1\" ]]; then\n  WEE8_BUILD_ARGS+=\" is_debug=true\"\n  WEE8_BUILD_ARGS+=\" v8_symbol_level=2\"\n  WEE8_BUILD_ARGS+=\" v8_optimized_debug=false\"\nelse\n  WEE8_BUILD_ARGS+=\" is_debug=false\"\n  WEE8_BUILD_ARGS+=\" v8_symbol_level=1\"\n  WEE8_BUILD_ARGS+=\" v8_enable_handle_zapping=false\"\nfi\n\n# Clang or not Clang, that is the question.\nWEE8_BUILD_ARGS+=\" is_clang=$$IS_CLANG\"\n# Hack to disable bleeding-edge compiler flags.\nWEE8_BUILD_ARGS+=\" use_xcode_clang=true\"\n# Use local toolchain.\nWEE8_BUILD_ARGS+=\" custom_toolchain=\\\"//build/toolchain/linux/unbundle:default\\\"\"\n# Use local stdlibc++ / libc++.\nWEE8_BUILD_ARGS+=\" use_custom_libcxx=false\"\n# Use local sysroot.\nWEE8_BUILD_ARGS+=\" use_sysroot=false\"\n# Disable unused GLib2 dependency.\nWEE8_BUILD_ARGS+=\" use_glib=false\"\n# Expose debug symbols.\nWEE8_BUILD_ARGS+=\" v8_expose_symbols=true\"\n# Build monolithic library.\nWEE8_BUILD_ARGS+=\" is_component_build=false\"\nWEE8_BUILD_ARGS+=\" v8_enable_i18n_support=false\"\nWEE8_BUILD_ARGS+=\" v8_enable_gdbjit=false\"\nWEE8_BUILD_ARGS+=\" v8_use_external_startup_data=false\"\n# Disable read-only heap, since it's leaky and HEAPCHECK complains about it.\n# TODO(PiotrSikora): remove when fixed upstream.\nWEE8_BUILD_ARGS+=\" v8_enable_shared_ro_heap=false\"\n\n# Set target architecture.\nif [[ $${ARCH} == \"x86_64\" ]]; then\n  WEE8_BUILD_ARGS+=\" target_cpu=\\\"x64\\\"\"\nelif [[ $${ARCH} == \"aarch64\" || $${ARCH} == \"arm64\" ]]; then\n  WEE8_BUILD_ARGS+=\" target_cpu=\\\"arm64\\\"\"\nelif [[ $${ARCH} == \"ppc64le\" ]]; then\n  WEE8_BUILD_ARGS+=\" target_cpu=\\\"ppc64\\\"\"\nelif [[ $${ARCH} == \"s390x\" ]]; then\n  WEE8_BUILD_ARGS+=\" target_cpu=\\\"s390x\\\"\"\nfi\n\n# Select gn tool for the current platform.\nif [[ -f /etc/centos-release ]] && [[ $$(cat /etc/centos-release) =~ \"CentOS Linux release 7\" ]] && [[ -x \"$$(command -v gn)\" ]]; then\n  # Use system default on CentOS 7, as it has an old version of GLIBC which is otherwise incompatible with the prebuilt binary.\n  gn=$$(command -v gn)\nelif [[ $${PLATFORM} == \"Darwin-x86_64\" ]]; then\n  gn=buildtools/mac/gn\nelif [[ $${PLATFORM} == \"Darwin-arm64\" ]]; then\n  gn=buildtools/mac-arm64/gn\nelif [[ $${PLATFORM} == \"Linux-x86_64\" ]]; then\n  gn=buildtools/linux64/gn\nelif [[ $${PLATFORM} == \"Linux-aarch64\" ]]; then\n  gn=buildtools/linux-arm64/gn\nelif [[ $${PLATFORM} == MSYS_NT-*-x86_64 ]]; then\n  gn=buildtools/win/gn.exe\nelse\n  # Fallback to system default.\n  gn=$$(command -v gn)\nfi\n\n# Select ninja tool for the current platform.\nif [[ $${PLATFORM} == \"Darwin-x86_64\" ]]; then\n  ninja=third_party/depot_tools/ninja-mac\nelif [[ $${PLATFORM} == \"Linux-x86_64\" ]]; then\n  ninja=third_party/depot_tools/ninja-linux64\nelif [[ $${PLATFORM} == MSYS_NT-*-x86_64 ]]; then\n  ninja=third_party/depot_tools/ninja.exe\nelse\n  # Fallback to system default.\n  ninja=$$(command -v ninja)\nfi\n\n# Build wee8.\n\"$$gn\" gen out/wee8 --args=\"$$WEE8_BUILD_ARGS\"\n\"$$ninja\" -C out/wee8 wee8\n\n# Move compiled library to the expected destinations.\npopd\nmv $$ROOT/wee8/out/wee8/obj/libwee8.a $(execpath libwee8.a)\n"}
def genrule_cmd(label):
    return _GENRULE_CMD[label]
